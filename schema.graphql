type NewsEvent {
  title: String
  description: String
}

input CreateNewsEventInput {
  title: String
  description: String
}

# type User {
#   email:  String
#   name:   String
#   address: String
#   age:    Int
# }

# type AddUserMutationResponse {
#   code: String!
#   success: Boolean!
#   message: String!
#   user: User
# }

type Vote {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

input VoteInput {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

type AddVoteMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: Vote
}

type getVotesQueryResponse {
  votes: [Vote]!
}

type Query {
  placeholder: Boolean
  getVotes: getVotesQueryResponse
}

type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
  addVote(voterID: String, invoice: String, date: String, campaignID: String, pollID: String, certified: Boolean): AddVoteMutationResponse
}

type Subscription {
  newsFeed: NewsEvent
  voteAdded(vote: VoteInput): Vote
}

# type Query {
#   getUsers: [User]
#   # getUser(userID: Int): User
#   # getUser(name: String): User
  # 
# }

# type Mutation {
#   # addUser(email: String, name: String, address: String, age: Int): AddUserMutationResponse
  # 
# }

# type Subscription {
#   # voteAdded(voteID: ID!): Vote
  # 
# #   # newsFeed: NewsEvent
# }
