type NewsEvent {
  title: String
  description: String
}

type Query {
  placeholder: Boolean
}

type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
}

type Subscription {
  newsFeed: NewsEvent
}

# type User {
#   email:  String
#   name:   String
#   address: String
#   age:    Int
# }

# type AddUserMutationResponse {
#   code: String!
#   success: Boolean!
#   message: String!
#   user: User
# }

# type Vote {
#   voterID: String!
#   invoice: String!
#   date: String!
#   campaignID: String!
#   pollID: String!
#   certified: Boolean!
# }

# input VoteInput {
#   voterID: String!
#   invoice: String!
#   date: String!
#   campaignID: String!
#   pollID: String!
#   certified: Boolean!
# }

# type AddVoteMutationResponse {
#   code: String!
#   success: Boolean!
#   message: String!
#   vote: Vote
# }

# type getVotesQueryResponse {
#   votes: [Vote]!
# }

# type Query {
#   getUsers: [User]
#   # getUser(userID: Int): User
#   # getUser(name: String): User
#   # getVotes: getVotesQueryResponse
# }

# type Mutation {
#   # addUser(email: String, name: String, address: String, age: Int): AddUserMutationResponse
#   addVote(voterID: String, invoice: String, date: String, campaignID: String, pollID: String, certified: Boolean): AddVoteMutationResponse
# }

# type Subscription {
# #   # voteAdded(voteID: ID!): Vote
#   voteAdded(vote: Vote): Vote
# #   # newsFeed: NewsEvent
# }
