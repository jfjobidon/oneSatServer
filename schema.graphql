scalar DateScalar

type NewsEvent {
  title: String
  description: String
}

# enum not compatible with prisma
# export enum Role {
#   SUPERADMIN
#   ADMIN
#   USER
# }

# Input types can't have fields that are other objects, only basic scalar types, list types, and other input types.
input CreateNewsEventInput {
  title: String
  description: String
}

# new Date('2023-02-03T01:00:00Z') // 2023-02-03
# new Date('2023-02-03T01:00:00+0500') // 2023-02-02

type User {
  email: String!
  name: String!
  password: String!
  roles: [String]
  creationDate: DateScalar!
  # updatedDate: String!
}

input UserInput {
  email: String!
  name: String!
  password: String!
}

# REVIEW: devrait hÃ©riter de type:  code, success et message --> fragment ?
type UserMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  token: String
  user: User
}

type Poll {
  campaignId: String!
  title: String!
}

input PollInput {
  campaignId: String!
  title: String!
}

type PollMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  poll: Poll
}


type Vote {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

input VoteInput {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

type AddVoteMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: Vote
}

type getVotesQueryResponse {
  votes: [Vote]!
}

type Campaign {
  authorId: String!
  title: String!
  question: String!
  description: String!
  message: String
  creationDate: DateScalar!
  startingDate: DateScalar!
  endingDate: DateScalar!
  updatedDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  totalSat: Int!
  blindAmount: Boolean
  blindRank: Boolean
  allowMultipleVotes: Boolean
  paused: Boolean
}

input CampaignInput {
  title: String!
  question: String!
  description: String!
  startingDate: DateScalar!
  endingDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  blindAmount: Boolean
  blindRank: Boolean
  allowMultipleVotes: Boolean
}

type CampaignMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  campaign: Campaign
}

type PollOption {
  pollId: String!
  title: String!
  description: String
}

input PollOptionInput {
  pollId: String!
  title: String!
  description: String 
}

type PollOptionMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  pollOption: PollOption
}

type Query {
  placeholder: Boolean
  getVotes: getVotesQueryResponse
  getUsers: [User]
  getUserById(id: String): User
  getUserByName(name: String): User
  getUserByEmail(email: String): User
  getVoteById(id: String): Vote
  login(email: String!, password: String!): UserMutationResponse
}

# TODO: ajouter les types inputVote, inputCampaign, inputUser
type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
  createPoll(pollInput: PollInput): PollMutationResponse
  createPollOption(pollOptionInput: PollOptionInput): PollOptionMutationResponse
  addVote(
    voterID: String
    invoice: String
    date: String
    campaignID: String
    pollID: String
    certified: Boolean
  ): AddVoteMutationResponse
  signup(userInput: UserInput): UserMutationResponse
  # signup(
  #   email: String!
  #   name: String!
  #   roles: [String]
  #   password: String!
  # ): UserMutationResponse
  createCampaign(campaignInput: CampaignInput): CampaignMutationResponse
}

type Subscription {
  newsFeed: NewsEvent
  voteAdded: Vote
}
