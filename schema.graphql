type NewsEvent {
  title: String
  description: String
}

input CreateNewsEventInput {
  title: String
  description: String
}

type User {
  email:  String!
  name:   String!
  password: String!
}

type AddUserMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type Vote {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

input VoteInput {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

type AddVoteMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: Vote
}

type getVotesQueryResponse {
  votes: [Vote]!
}

type SignupMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  token: String
  user: User
}

type Query {
  placeholder: Boolean
  getVotes: getVotesQueryResponse
  getUsers: [User]
  getUserById(id: String): User
  getUserByName(name: String): User
  getUserByEmail(email: String): User
  getVoteById(id: String): Vote
  login(email: String!, password: String!): SignupMutationResponse
}

type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
  addVote(voterID: String, invoice: String, date: String, campaignID: String, pollID: String, certified: Boolean): AddVoteMutationResponse
  addUser(email: String, name: String, password: String): AddUserMutationResponse
  signup(email: String!, name: String!, password: String!): SignupMutationResponse
}

type Subscription {
  newsFeed: NewsEvent
  voteAdded: Vote
}

