scalar DateScalar

type NewsEvent {
  title: String
  description: String
}

# enum not compatible with prisma
# export enum Role {
#   SUPERADMIN
#   ADMIN
#   USER
# }

# Input types can't have fields that are other objects, only basic scalar types, list types, and other input types.
input CreateNewsEventInput {
  title: String
  description: String
}

# new Date('2023-02-03T01:00:00Z') // 2023-02-03
# new Date('2023-02-03T01:00:00+0500') // 2023-02-02

type User {
  id: String!
  email: String!
  userName: String!
  uid: String!
  roles: [String]
  campaigns: [Campaign]
  creationDate: DateScalar!
  updatedDate: DateScalar!
  lastLogin: DateScalar!
  fundings: [Funding]
  # updatedDate: String!
}

input UserInput {
  email: String!
  userName: String!
  uid: String!
}

input PausePollInput {
  pollId: String!
}

input PauseCampaignInput {
  campaignId: String!
}

# REVIEW: devrait hÃ©riter de type:  code, success et message --> fragment ?
type UserMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

input FundingInput {
  userId: String!
  sats: Int!
  invoice: String!
}

type Funding {
  userId: String!
  sats: Int!
  invoice: String!
  date: DateScalar!
}

type FundingMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  funding: Funding
}

type Poll {
  id: String!
  campaignId: String!
  authorId: String!
  title: String!
  description: String!
  paused: Boolean!
  creationDate: DateScalar!
  startingDate: DateScalar!
  endingDate: DateScalar!
  updatedDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  blindAmount: Boolean
  blindRank: Boolean
  blindVote: Boolean
  allowMultipleVotes: Boolean
  pollOptions: [PollOption]
  sats: Int!
  votes: Int!
  views: Int!  
}

type PollAll {
  id: String
  campaignId: String!
  title: String!
  description: String!
  paused: Boolean!
  sats: Int
  votes: Int
  views: Int
  pollOptions: [PollOption]
}

input PollInput {
  campaignId: String!
  authorId: String!
  title: String!
  description: String!
  startingDate: DateScalar!
  endingDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  blindAmount: Boolean
  blindRank: Boolean
  blindVote: Boolean
  allowMultipleVotes: Boolean
}

type PollMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  poll: Poll
}

type Vote {
  userId: String!
  userName: String!
  voteCode: String!
  invoice: String!
  sats: Int!
  date: String!
  campaignId: String!
  pollId: String!
  pollOptionId: String!
  certified: Boolean!
}

input VoteInput {
  userId: String!
  userName: String!
  invoice: String!
  sats: Int!
  campaignId: String!
  pollId: String!
  pollOptionId: String!
  certified: Boolean!
}

type AddVoteMutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  vote: Vote
}

type getVotesQueryResponse {
  votes: [Vote]!
}

type Campaign {
  id: String!
  authorId: String!
  title: String!
  description: String!
  message: String
  creationDate: DateScalar!
  startingDate: DateScalar!
  endingDate: DateScalar!
  updatedDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  isPrivate: Boolean
  blindAmount: Boolean
  blindRank: Boolean
  blindVote: Boolean
  allowMultipleVotes: Boolean
  paused: Boolean
  sats: Int
  votes: Int
  views: Int
}

type CampaignAll {
  id: String!
  authorId: String!
  title: String!
  description: String!
  message: String
  creationDate: DateScalar!
  startingDate: DateScalar!
  endingDate: DateScalar!
  updatedDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  isPrivate: Boolean
  blindAmount: Boolean
  blindRank: Boolean
  blindVote: Boolean
  allowMultipleVotes: Boolean
  paused: Boolean
  sats: Int!
  votes: Int!
  views: Int!
  pollsAll: [PollAll]
}

input CampaignInput {
  title: String!
  description: String!
  authorId: String!
  startingDate: DateScalar!
  endingDate: DateScalar!
  minSatPerVote: Int
  maxSatPerVote: Int
  suggestedSatPerVote: Int
  isPrivate: Boolean
  blindAmount: Boolean
  blindRank: Boolean
  blindVote: Boolean
  allowMultipleVotes: Boolean
}

type CampaignMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  campaign: Campaign
}

type PollOption {
  id: String!
  pollId: String!
  title: String!
  description: String
  sats: Int!
  votes: Int!
  views: Int!
  aVotes: [Vote]!
}

input PollOptionInput {
  pollId: String!
  title: String!
  description: String 
}

type PollOptionMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  pollOption: PollOption
}

type campaignStatus {
  campaignId: String
  campaignPaused: Boolean
  newItemPaused: Boolean
  newItemId: String!
  pollsStatus: [pollStatus]
}

type pollStatus {
  pollId: String
  paused: Boolean
}

type pauseMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  campaignStatus: campaignStatus
}

type pingResponse {
  pong: String
}

type Query {
  placeholder: Boolean
  # REVIEW: campaignId Not null (String!) but must provide default value !!!
  # get list of all votes
  ping: pingResponse
  getLocalIpAddress: String!
  getVotesForCampaign(campaignId: String! = "", userId: String): getVotesQueryResponse
  getVotesForPoll(pollId: String! = "", userId: String): getVotesQueryResponse
  getVotesForPollOption(pollOptionId: String! = "", userId: String): getVotesQueryResponse
  getVotesForUser(userId: String): getVotesQueryResponse
  getUsers: [User]
  getUserById(id: String): User
  getUserName(id: String): String
  getUserByUserName(userName: String): User
  getUserByEmail(email: String): User
  getPollOption(id: String): PollOption
  getCampaign(id: String): Campaign
  getCampaignAll(id: String): CampaignAll
  getCampaigns(id: String): [Campaign]
  getPoll(id: String): Poll
  getPollsForCampaign(campaignId: String): [Poll]
  getPollOptionsForPoll(pollId: String): [PollOption]
  getVoteById(id: String): Vote
  # login(email: String!, password: String!): UserMutationResponse
}

# TODO: ajouter les types inputVote, inputCampaign, inputUser
type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
  createPoll(pollInput: PollInput): PollMutationResponse
  createPollOption(pollOptionInput: PollOptionInput): PollOptionMutationResponse
  addVote(voteInput: VoteInput): AddVoteMutationResponse
  signup(userInput: UserInput): UserMutationResponse
  createCampaign(campaignInput: CampaignInput): CampaignMutationResponse
  accountFunding(fundingInput: FundingInput): FundingMutationResponse
  togglePauseCampaign(pauseCampaignInput: PauseCampaignInput): pauseMutationResponse
  togglePausePoll(pausePollInput: PausePollInput): pauseMutationResponse
}

type Subscription {
  newsFeed: NewsEvent
  voteAdded(campaignId: String): Vote
}
