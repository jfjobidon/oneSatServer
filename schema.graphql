scalar DateScalar

type NewsEvent {
  title: String
  description: String
}

# enum not compatible with prisma
# export enum Role {
#   SUPERADMIN
#   ADMIN
#   USER
# }

type Campaign {
  # authorEmail:  String!
  authorId:  String!
  title:   String!
  # creationDate: DateTime @default(now())
  # updatedAt: DateTime @updatedAt
  # xyz:      String @unique @default(uuid())
}

# input CampaignInput {
#   authorId:  String!
#   title:   String!
# }

# Input types can't have fields that are other objects, only basic scalar types, list types, and other input types.
input CreateNewsEventInput {
  title: String
  description: String
}

# new Date('2023-02-03T01:00:00Z') // 2023-02-03
# new Date('2023-02-03T01:00:00+0500') // 2023-02-02

type User {
  email:  String!
  name:   String!
  password: String!
  roles: [String]
  # campaigns: [String]
  creationDate: DateScalar!
  # updatedDate: String!
}

# REVIEW: devrait h√©riter de type:  code, success et message
type AddUserMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type Vote {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

input VoteInput {
  voterID: String!
  invoice: String!
  date: String!
  campaignID: String!
  pollID: String!
  certified: Boolean!
}

input CampaignInput {
  authorId: String!
  title: String!
}

type AddVoteMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: Vote
}

type getVotesQueryResponse {
  votes: [Vote]!
}

type SignupMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  token: String
  user: User
}

type CampaignMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  campaign: Campaign
}

type Query {
  placeholder: Boolean
  getVotes: getVotesQueryResponse
  getUsers: [User]
  getUserById(id: String): User
  getUserByName(name: String): User
  getUserByEmail(email: String): User
  getVoteById(id: String): Vote
  login(email: String!, password: String!): SignupMutationResponse
}

# TODO: ajouter les types inputVote, inputCampaign, inputUser
type Mutation {
  createNewsEvent(title: String, description: String): NewsEvent
  addVote(voterID: String, invoice: String, date: String, campaignID: String, pollID: String, certified: Boolean): AddVoteMutationResponse
  # addUser(email: String, name: String, password: String): AddUserMutationResponse
  signup(email: String!, name: String!, roles: [String], password: String!): SignupMutationResponse
  # createCampaign(campaign: CampaignInput): CampaignMutationResponse
  createCampaign(authorId: String, title: String): CampaignMutationResponse
}

type Subscription {
  newsFeed: NewsEvent
  voteAdded: Vote
}

