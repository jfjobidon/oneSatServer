// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// const { v4: uuid } =require('uuid)
// uuid()
// or: 
// const uuid = require('uuid')
// uuid.v4()
// TODO: see nanoid

generator client {
  provider = "prisma-client-js"
}

// TODO: get url from config
datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://osovAdmin:rRTGwNDL7a@cluster0.3t8mxys.mongodb.net/onesatonevote"
  // url = env("DBURI") // TODO: DEBUG:
}

// REVIEW: not compatible with graphql
// enum Role {
//   USER = 'USER',
//   ADMIN
//   SUPERADMIN
// }

model Campaign {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  // author   User @relation(fields: [authorEmail], references: [email])
  // authorEmail String
  author              User     @relation(fields: [authorId], references: [id])
  authorId            String   @db.ObjectId
  title               String
  description         String
  message             String?
  creationDate        DateTime // NOTE: no Default possible for related records (@default(now()))
  startingDate        DateTime
  endingDate          DateTime
  updatedDate         DateTime
  minSatPerVote       Int // default in config file
  maxSatPerVote       Int // default in config file
  suggestedSatPerVote Int // default in config file
  blindAmount         Boolean
  blindRank           Boolean
  blindVote           Boolean
  allowMultipleVotes  Boolean
  paused              Boolean  @default(false) // REVIEW: how to get the variable from config file ?
  polls               Poll[]
  // updatedAt DateTime @updatedAt
  // xyz      String @unique @default(uuid())
}

// TODO: tester uuid: myuuid String @default(uuid())
// TODO: define an index on something
// data DateTime @default("2020-03-19T14:21:00+02:00")
model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  email        String     @unique
  userName     String     @unique
  password     String
  uid          String
  roles        String[]   @default(["USER"])
  campaigns    Campaign[]
  creationDate DateTime   @default(now())
  fundings     Funding[]
  // updatedDate DateTime @updatedAt
  Poll         Poll[]
}

model Funding {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime @default(now())
  invoice  String
  sats     Int
  author   User     @relation(fields: [authorId], references: [id])
  authorId String   @db.ObjectId
}

//   message             String?

// REVIEW: change default minSatPerVote and maxSatsPerVote ?
model Poll {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  campaign            Campaign     @relation(fields: [campaignId], references: [id])
  campaignId          String       @db.ObjectId
  author              User         @relation(fields: [authorId], references: [id])
  authorId            String       @db.ObjectId
  title               String
  description         String
  paused              Boolean      @default(false)
  creationDate        DateTime
  startingDate        DateTime
  endingDate          DateTime
  updatedDate         DateTime
  minSatPerVote       Int // default in config file
  maxSatPerVote       Int // default in config file
  suggestedSatPerVote Int // default in config file
  blindAmount         Boolean
  blindRank           Boolean
  blindVote           Boolean
  allowMultipleVotes  Boolean
  pollOptions         PollOption[]
}

model PollOption {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  poll        Poll   @relation(fields: [pollId], references: [id])
  pollId      String @db.ObjectId
  title       String
  description String
}
